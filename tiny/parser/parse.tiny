%%
Tiny       -> PROGRAM Name ':' Consts Types Dclns Body Name '.' 	=> "program";
Consts     -> CONST	Const list ';'		=> "consts"
		   -> 					     	=> "consts";
Const      -> Name '='	ConstRVal		=> "const"
		   -> 					     	=> "<null>";
ConstRVal  -> Integer
		   -> Character
		   -> Name;
Types     -> TYPE Typel list ';'		=> "types"
		   -> 					     	=> "types";
Typel     -> Name '=' '(' Enumerations ')' => "type"
		  -> Name '=' Name 				=> "type"
		  -> 					     	=> "<null>";	
Enumerations -> Name list ','			=> "lit";		      
Dclns      -> VAR (Dcln ';')*				=> "dclns"
           -> 					     	=> "dclns";
Dcln       -> Name list ',' ':' Name			=> "dcln";
Body       -> BEGINX Statement list ';' END      	=> "block";
Statement  -> Name ASSIGNMENT Expression          	=> "assign"
		   -> Name SWAP Name          				=> "swap"
           -> OUTPUT '(' Expressions ')'           	=> "output"
           -> IF Expression THEN Statement
                            ELSE Statement       	=> "if"
           -> IF Expression THEN Statement       	=> "if"
           -> WHILE Expression DO Statement      	=> "while"
           -> Body
		   -> REPEAT Statements UNTIL Expression			=> "repeat"
		   -> FOR Name ASSIGNMENT Expression TO Expression DO Statement => "upto"
		   -> FOR Name ASSIGNMENT Expression DOWNTO Expression DO Statement => "downto"
		   -> EXIT									=> "exit"
		   -> LOOP Statements POOL					=> "loop"
		   
		   -> CASE Expression OF Case_Clause list ';' Otherwise END	=> "case"
		   ->                                        	=> "<null>";
			
Case_Clause	->	Case_Literal ':' Statement			=>	"case_clause"
			->										=>	"<null>";

Case_Literal ->	Integer RANGE Integer		=>	".."
			->	Integer	;
		   
Otherwise	-> ';' OTHERWISE Statement					=> "otherwise"
			-> ';';
	   
Statements	->	Statement list ';' ;
	   
Expressions -> 	 Expression list ',' ;

Expression -> Term	                         		
	   -> Term LTE Term				=> "<="
	   -> Term '=' Term				=> "="
	   -> Term NOTEQ Term			=> "<>"
	   -> Term GTE Term				=> ">="
	   -> Term LT Term				=> "<"
	   -> Term GT Term				=> ">";

Term       -> Bina 
			-> Term '-' Bina         => "-"
			-> Term OR Bina         => "or"
	   -> Term '+' Bina				=> "+";
	   
Bina   -> Unary	
		-> Bina '*' Unary				=> "*"
		-> Bina '/' Unary				=> "/"
		-> Bina AND Unary				=> "and"
   		-> Bina MOD Unary				=> "mod";

Unary    -> '-' Unary                            	=> "-"
		-> '+' Unary                            	
		-> NOT Unary                            	=> "not"
		-> Expo;

Expo -> Primary EXP Expo 				=> "**"
	 -> Primary;

Primary    -> READ                                 	=> "read"
			-> EOFFN						=> "eof"
           -> Name
           -> INTEGER_NUM				=> "<integer>"
		   -> CHARLIT					=> "<char>"
           -> '(' Expression ')';

Character  -> CHARLIT					=> "<char>"; 		   
		   
Integer		-> 		INTEGER_NUM			=> "<integer>"   ;

Name       -> IDENTIFIER				=> "<identifier>";
